import java.util.Iterator;
import java.util.NoSuchElementException;

public class OptimizedQueue<Item> implements Iterable<Item> {
    private Node first; 
    private Node last; 
    private Node previousLast;
    private int n; 

    private class Node {
        private Item item;
        private Node next;
    }

    private class QueueIterator implements Iterator<Item> {
        private Node current = first;
        @Override
        public boolean hasNext() {
            return current != null;
        }
        @Override
        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next;
            return item;
        }
    }

    public OptimizedQueue() {
        first = null;
        last = null;
        previousLast = null;
        n = 0;
    }

    public boolean isEmpty() {
        return first == null;
    }

    public int size() {
        return n;
    }

    public void enqueue(Item item) {
        Node oldLast = last; 
        last = new Node(); 
        last.item = item; 
        last.next = null;
        if (isEmpty()) first = last; 
        else oldLast.next = last; 
        n++;
        previousLast = oldLast; 
    }

    public Item dequeue() {
        if (isEmpty()) throw new NoSuchElementException("Queue underflow");
        Item item = first.item; 
        first = first.next; 
        n--;
        if (isEmpty()) last = null;
        return item;
    }

    @Override
    public Iterator<Item> iterator() {
        return new QueueIterator();
    }
      //Exemplo:
    public static void main(String[] args) {
        // Testando implementação
        OptimizedQueue<Integer> queue = new OptimizedQueue<>();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        System.out.println("Dequeue: " + queue.dequeue());
        System.out.println("Dequeue: " + queue.dequeue());
        queue.enqueue(4);
        queue.enqueue(5);
        System.out.println("Dequeue: " + queue.dequeue());
        System.out.println("Dequeue: " + queue.dequeue());
        System.out.println("Dequeue: " + queue.dequeue());
    }
}
